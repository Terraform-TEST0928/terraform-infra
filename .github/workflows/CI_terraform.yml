name: Terraform CI

on:
  pull_request:
    types: [opend, reopened, synchronize]

jobs:
  CI_terraform:
    runs-on: [self-hosted, Linux, X64]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        environment: [dev] # 現状1環境のみ 
    timeout-minutes: 60
    permissions:
      # workload identity連携によるToken発行には以下権限が必要
      id-token: write
      contents: read
      pull-requests: write
      issues: write 

    steps:
    - name: Check Runner User
      run: |
        echo "Current user:"
        whoami
        echo "HOME directory:"
        echo $HOME

    - name: Checkout Repo
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Configure AWS Credentials (AssumeRole)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::392329150290:role/terraform-assume-role
        aws-region: ap-northeast-1
        role-duration-seconds: 3600

    - name: Verify AWS Authentication
      run: |
        echo -e "\033[32mChecking AWS credentials...\033[0m"
        aws sts get-caller-identity

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    # - name: Setup TFLint
    #   uses: terraform-linters/setup-tflint@v4
    #   with:
    #     tflint_version: v0.52.0

    - name: Setup tfcmt
      uses: shmokmt/actions-setup-tfcmt@v2
      with:
        version: v4.6.0

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      #continue-on-error: true

    - name: Check Format Result
      if: always()
      run: |
        if [ "${{ steps.fmt.conclusion }}" == "success" ]; then
          echo -e "\033[32mTerraform fmt Succeeded\033[0m"
        else
          echo -e "\033[31mTerraform fmt Failed\033[0m"
        fi

    # - name: Init TFLint
    #   run: tflint --init
    #   continue-on-error: true

    # - name: Run TFLint
    #   run: tflint --recursive
    #   continue-on-error: true

    - name: Run TFLint
      id: tflint
      uses: reviewdog/action-tflint@master
      with:
        github_token: ${{ secrets.github_token }}
        level: info,warning,error
        reporter: github-pr-review
        fail_level: none
        filter_mode: diff_context
        flags: --recursive -c ${{ github.workspace }}/.tflint.hcl
        tflint_init: true
        tflint_version: v0.52.0
        tflint_config: .tflint.hcl
      #continue-on-error: true

    - name: Check Tflint Result
      if: always()
      run: |
        if [ "${{ steps.tflint.conclusion }}" == "success" ]; then
          echo -e "\033[32mtflint Succeeded\033[0m"
        else
          echo -e "\033[31mtflint Failed\033[0m"
        fi

    - name: Terraform Init
      working-directory: env/${{ matrix.environment }}
      run: terraform init

    - name: Terraform Validation
      id: validate
      working-directory: env/${{ matrix.environment }}
      run: terraform validate
      #continue-on-error: true

    - name: Check Validate Result
      if: always()
      run: |
        if [ "${{ steps.validate.conclusion }}" == "success" ]; then
          echo -e "\033[32mTerraform validate Succeeded\033[0m"
        else
          echo -e "\033[31mTerraform validate Failed\033[0m"
        fi

    - name: Run Trivy vulnerability scanner
      id: trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: "config"
        hide-progress: true
        severity: "CRITICAL,HIGH"
        scan-ref: .
        output: trivy-scan-result.txt

    - name: Check Trivy Result
      if: always()
      run: |
        if [ "${{ steps.trivy.conclusion }}" == "success" ]; then
          echo -e "\033[32mtrivy scan Succeeded\033[0m"
        else
          echo -e "\033[31mtrivy scan Failed\033[0m"
        fi

    - name: Format Trivy Scan Result
      run: |
        if [ -s trivy-scan-result.txt ]; then
          # ファイルに内容がある場合
          echo -e "## 脆弱性スキャン結果\n<details><summary>詳細</summary>\n\n\`\`\`\n$(cat trivy-scan-result.txt)\n\`\`\`\n</details>" > formatted-trivy-result.md
        else
          # ファイルが空の場合
          echo -e "## 脆弱性スキャン結果\n脆弱性が検知されませんでした。" > formatted-trivy-result.md
        fi

    - name: Comment PR with Trivy scan results
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        GITHUB_TOKEN: ${{ secrets.github_token }}
        path: formatted-trivy-result.md

    - name: Select Terraform Workspace
      working-directory: env/${{ matrix.environment }}
      run: |
        if terraform workspace list | grep -qw "${{ matrix.environment }}"; then
          echo "Workspace ${{ matrix.environment }} exists. Selecting it."
          terraform workspace select "${{ matrix.environment }}"
        else
          echo "Workspace ${{ matrix.environment }} does not exist. Creating it."
          terraform workspace new "${{ matrix.environment }}"
        fi

    - name: Terraform Plan
      working-directory: env/${{ matrix.environment }}
      run: tfcmt plan -patch -- terraform plan -input=false
